-- MySQL Script generated by MySQL Workbench
-- Fri Jul 27 10:12:46 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema raumbelegung
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `raumbelegung` ;

-- -----------------------------------------------------
-- Schema raumbelegung
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `raumbelegung` DEFAULT CHARACTER SET utf8 ;
USE `raumbelegung` ;

-- -----------------------------------------------------
-- Table `raeume`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `raeume` ;

CREATE TABLE IF NOT EXISTS `raeume` (
  `raumid` INT NOT NULL AUTO_INCREMENT,
  `bezeichnung` VARCHAR(30) NOT NULL,
  `flaeche` FLOAT NOT NULL,
  PRIMARY KEY (`raumid`),
  UNIQUE INDEX `bezeichnung_UNIQUE` (`bezeichnung` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `computerhersteller`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `computerhersteller` ;

CREATE TABLE IF NOT EXISTS `computerhersteller` (
  `herstellerid` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`herstellerid`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `computer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `computer` ;

CREATE TABLE IF NOT EXISTS `computer` (
  `computerid` INT NOT NULL AUTO_INCREMENT,
  `herstellerid` INT NOT NULL,
  `modell` VARCHAR(80) NOT NULL,
  `ram_mibyte` INT NOT NULL,
  `ipaddr` BIGINT UNSIGNED NOT NULL,
  `networkname` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`computerid`),
  INDEX `fk_computer_computerhersteller_idx` (`herstellerid` ASC),
  UNIQUE INDEX `ipaddr_UNIQUE` (`ipaddr` ASC),
  UNIQUE INDEX `networkname_UNIQUE` (`networkname` ASC),
  CONSTRAINT `fk_computer_computerhersteller`
    FOREIGN KEY (`herstellerid`)
    REFERENCES `computerhersteller` (`herstellerid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mitarbeiter`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mitarbeiter` ;

CREATE TABLE IF NOT EXISTS `mitarbeiter` (
  `mitarbeiterid` INT NOT NULL AUTO_INCREMENT,
  `vorname` VARCHAR(60) NOT NULL,
  `nachname` VARCHAR(60) NOT NULL,
  `gebdatum` DATE NULL,
  `adresse` VARCHAR(80) NULL,
  `ort` VARCHAR(60) NULL,
  `plz` INT NULL,
  PRIMARY KEY (`mitarbeiterid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `arbeitsplaetze`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `arbeitsplaetze` ;

CREATE TABLE IF NOT EXISTS `arbeitsplaetze` (
  `apid` INT NOT NULL AUTO_INCREMENT,
  `raumid` INT NOT NULL,
  PRIMARY KEY (`apid`),
  INDEX `fk_arbeitsplaetze_raeume1_idx` (`raumid` ASC),
  CONSTRAINT `fk_arbeitsplaetze_raeume1`
    FOREIGN KEY (`raumid`)
    REFERENCES `raeume` (`raumid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `belegung`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `belegung` ;

CREATE TABLE IF NOT EXISTS `belegung` (
  `belegungid` INT NOT NULL AUTO_INCREMENT,
  `mitarbeiterid` INT NULL,
  `computerid` INT NULL,
  `apid` INT NOT NULL,
  INDEX `fk_arbeitsplaetze_mitarbeiter1_idx` (`mitarbeiterid` ASC),
  INDEX `fk_arbeitsplaetze_computer1_idx` (`computerid` ASC),
  INDEX `fk_belegung_arbeitsplaetze1_idx` (`apid` ASC),
  PRIMARY KEY (`belegungid`),
  UNIQUE INDEX `computerid_UNIQUE` (`computerid` ASC),
  UNIQUE INDEX `mitarbeiterid_UNIQUE` (`mitarbeiterid` ASC),
  CONSTRAINT `fk_arbeitsplaetze_mitarbeiter1`
    FOREIGN KEY (`mitarbeiterid`)
    REFERENCES `mitarbeiter` (`mitarbeiterid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_arbeitsplaetze_computer1`
    FOREIGN KEY (`computerid`)
    REFERENCES `computer` (`computerid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_belegung_arbeitsplaetze1`
    FOREIGN KEY (`apid`)
    REFERENCES `arbeitsplaetze` (`apid`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `raumbelegung` ;

-- -----------------------------------------------------
-- View `freie_arbeitsplaetze`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `freie_arbeitsplaetze` ;
USE `raumbelegung`;
CREATE  OR REPLACE VIEW `freie_arbeitsplaetze` AS
SELECT apid, raeume.raumid, raeume.bezeichnung 
FROM arbeitsplaetze LEFT JOIN raeume USING (raumid)
WHERE NOT EXISTS (SELECT belegungid FROM belegung WHERE arbeitsplaetze.apid=belegung.apid AND NOT(belegung.mitarbeiterid IS NULL));

-- -----------------------------------------------------
-- View `computer_lesbar`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `computer_lesbar` ;
USE `raumbelegung`;
CREATE  OR REPLACE VIEW `computer_lesbar` AS 
SELECT 
	computerid, `name`, modell, networkname, ram_mibyte,
	CONCAT (
		((ipaddr & X'FF000000') >> 24), '.',
		((ipaddr & X'00FF0000') >> 16), '.', 
		((ipaddr & X'0000FF00') >>  8), '.', 
		((ipaddr & X'000000FF') >>  0)
	) AS ipaddr,
    belegung.apid AS Arbeitsplatz_ID
	FROM computer 
	NATURAL JOIN computerhersteller
	LEFT JOIN belegung USING (computerid);

-- -----------------------------------------------------
-- View `belegung_lesbar`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `belegung_lesbar` ;
USE `raumbelegung`;
CREATE  OR REPLACE VIEW `belegung_lesbar` AS
	SELECT 
		raeume.bezeichnung AS Raum, 
        belegung.apid AS AP_ID,
		vorname AS Vorname, 
		nachname AS Nachname,
		computer_lesbar.name AS PC_Marke,
		computer_lesbar.modell AS PC_Modell,
		computer_lesbar.networkname AS Netzwerk_Name,
		computer_lesbar.ram_mibyte AS RAM_MB,
		computer_lesbar.ipaddr AS IP_Addr
	FROM belegung
	LEFT JOIN mitarbeiter USING (mitarbeiterid)
	NATURAL JOIN arbeitsplaetze
	NATURAL JOIN raeume
	LEFT JOIN computer_lesbar USING (computerid);

-- -----------------------------------------------------
-- View `freie_ap_raum`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `freie_ap_raum` ;
USE `raumbelegung`;
CREATE  OR REPLACE VIEW `freie_ap_raum` AS
	SELECT 
		raeume.raumid AS raumid, 
		raeume.bezeichnung AS Raum, 
		COUNT(freie_arbeitsplaetze.apid) AS Freie_Arbeitsplaetze 
		FROM raeume 
		LEFT JOIN freie_arbeitsplaetze USING (raumid)
		GROUP BY raeume.raumid
		ORDER BY Freie_Arbeitsplaetze DESC;

-- -----------------------------------------------------
-- View `freie_computer`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `freie_computer` ;
USE `raumbelegung`;
CREATE  OR REPLACE VIEW `freie_computer` AS
SELECT computerid, `name` AS hersteller, modell, networkname, ram_mibyte
	FROM computer_lesbar WHERE NOT EXISTS (
		SELECT belegungid FROM belegung 
		WHERE belegung.computerid=computer_lesbar.computerid
	)
;

-- -----------------------------------------------------
-- View `mitarbeiter_ohne_ap`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mitarbeiter_ohne_ap` ;
USE `raumbelegung`;
CREATE  OR REPLACE VIEW `mitarbeiter_ohne_ap` AS
SELECT * FROM mitarbeiter
	WHERE NOT EXISTS (
		SELECT belegungid FROM belegung WHERE mitarbeiter.mitarbeiterid=belegung.mitarbeiterid
	)
;

-- -----------------------------------------------------
-- View `volle_raeume`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `volle_raeume` ;
USE `raumbelegung`;
CREATE  OR REPLACE VIEW `volle_raeume` AS
SELECT * FROM freie_ap_raum WHERE Freie_Arbeitsplaetze=0;

-- -----------------------------------------------------
-- View `raeume_ap`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `raeume_ap` ;
USE `raumbelegung`;
CREATE  OR REPLACE VIEW `raeume_ap` AS
SELECT 
	raeume.bezeichnung AS Raum, 
    raeume.flaeche,
	COUNT(arbeitsplaetze.apid) AS Arbeitsplaetze,
	(SELECT Freie_Arbeitsplaetze FROM freie_ap_raum WHERE raeume.raumid=freie_ap_raum.raumid) AS Freie_Arbeitsplaetze
	FROM raeume 
    JOIN arbeitsplaetze USING (raumid)
	GROUP BY raeume.raumid;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


